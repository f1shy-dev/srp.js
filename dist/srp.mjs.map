{"version":3,"file":"srp.mjs","sources":["../src/math.ts","../src/kdf.ts","../src/srp.ts","../src/group.ts","../src/index.ts"],"sourcesContent":["// Modular exponentiation for a ^ b mod |m|\nexport function exp(base: bigint, exponent: bigint, modulus: bigint): bigint {\n  if (modulus === 1n) return 0n;\n  let result = 1n;\n  base = mod(base, modulus)\n  while (exponent > 0) {\n    if (mod(exponent, 2n) === 1n)\n      result = (result * base) % modulus;\n    exponent = exponent >> 1n;\n    base = mod((base * base), modulus);\n  }\n\n  return result;\n}\n\nexport function abs(input: bigint): bigint {\n  return input < 0n ? -input : input;\n}\n\nexport function gcd(a: bigint, b: bigint): bigint {\n  a = abs(a);\n  b = abs(b);\n\n  if (b > a) {\n    let temp = a;\n    a = b;\n    b = temp;\n  }\n\n  while (true) {\n    a = mod(a, b)\n    if (a === 0n) {\n      return b;\n    }\n    b = mod(b, a)\n    if (b === 0n) {\n      return a;\n    }\n  }\n}\n\nexport function xorUint8Array(a: Uint8Array, b: Uint8Array): Uint8Array {\n  // lifted straight from https://golang.org/src/crypto/cipher/xor.go\n  // Only work with the shorter array to avoid index out of range issues.\n  let n = b.length < a.length ? b.length : a.length;\n  let dst = new Uint8Array(n);\n  for (let i = 0; i < n; i++) {\n    dst[i] = a[i] ^ b[i];\n  }\n\n  return dst;\n}\n\nexport function constantTimeCompare(a: Uint8Array, b: Uint8Array): boolean {\n  if (a.length != b.length) {\n    return false;\n  }\n\n  let v: number;\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] !== b[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport function mod(a: bigint, b: bigint): bigint {\n  return ((a % b) + b) % b;\n}\n\nexport function bigIntFromUint8Array(input: Uint8Array): bigint {\n  return BigInt(`0x${ uint8ArrayToHex(input) }`);\n}\n\nexport function uint8ArrayFromBigInt(input: bigint): Uint8Array {\n  return hexToUint8Array(input.toString(16));\n}\n\nexport function hexToUint8Array(hexString: string): Uint8Array {\n  if (hexString === undefined) {\n    throw RangeError('hexString cannot undefined')\n  }\n\n  const hexMatch = hexString.match(/^(0x)?([\\da-fA-F]+)$/)\n  if (hexMatch == null) {\n    throw RangeError('hexString must be a hexadecimal string, e.g. \\'0x4dc43467fe91\\' or \\'4dc43467fe91\\'')\n  }\n\n  let hex = hexMatch[2]\n  hex = (hex.length % 2 === 0) ? hex : '0' + hex\n\n  return Uint8Array.from(hex.match(/[\\da-fA-F]{2}/g)!.map((h) => parseInt(h, 16)));\n}\n\nexport function uint8ArrayToHex(array: Uint8Array): string {\n  return Array.from(array, byte => ('0' + (byte & 0xFF).toString(16)).slice(-2)).join('');\n}\n\nexport function stringToUint8Array(input: string): Uint8Array {\n  return Uint8Array.from(input, c => c.charCodeAt(0));\n}\n","import {\n  bigIntFromUint8Array,\n  hexToUint8Array,\n  stringToUint8Array,\n} from \"./math\";\n\n// KDFSHA512 is a key-derivation-function using SHA512 as the inner and outer hash.\nexport async function KDFSHA512(\n  salt: Uint8Array,\n  username: string,\n  password: string\n): Promise<bigint> {\n  const innerInput = stringToUint8Array(`${username}:${password}`);\n  const innerResult = await sumSHA512(innerInput);\n\n  let outerInput = new Uint8Array(salt.length + innerResult.length);\n  outerInput.set(salt, 0);\n  outerInput.set(innerResult, salt.length);\n  const outerResult = await sumSHA512(outerInput);\n\n  return bigIntFromUint8Array(outerResult);\n}\n\nexport async function KDFSHA256(\n  salt: Uint8Array,\n  username: string,\n  password: string,\n  usernameInX: boolean = true\n): Promise<bigint> {\n  const innerInput = stringToUint8Array(\n    `${usernameInX ? username : \"\"}:${password}`\n  );\n  const innerResult = await sumSHA256(innerInput);\n\n  let outerInput = new Uint8Array(salt.length + innerResult.length);\n  outerInput.set(salt, 0);\n  outerInput.set(innerResult, salt.length);\n  const outerResult = await sumSHA256(outerInput);\n\n  return bigIntFromUint8Array(outerResult);\n}\n\nexport async function sumSHA512(input: Uint8Array): Promise<Uint8Array> {\n  return sumHash(\"SHA-512\", input);\n}\n\nexport async function sumSHA256(input: Uint8Array): Promise<Uint8Array> {\n  return sumHash(\"SHA-256\", input);\n}\n\nasync function sumHash(\n  algorithm: AlgorithmIdentifier,\n  input: Uint8Array\n): Promise<Uint8Array> {\n  const result = await crypto.subtle\n    .digest(algorithm, input.buffer)\n    .then((buf) =>\n      Array.prototype.map\n        .call(new Uint8Array(buf), (x: number) =>\n          (\"00\" + x.toString(16)).slice(-2)\n        )\n        .join(\"\")\n    );\n\n  return hexToUint8Array(result.toString());\n}\n","import { Group } from \"./group\";\nimport { sumSHA256 } from \"./kdf\";\nimport {\n  bigIntFromUint8Array,\n  constantTimeCompare,\n  exp,\n  gcd,\n  mod,\n  stringToUint8Array,\n  uint8ArrayFromBigInt,\n  xorUint8Array,\n} from \"./math\";\n\nexport const MinGroupSize = 2048;\nexport const MinExponentSize = 32;\nexport const bigZero = BigInt(0);\nexport const bigOne = BigInt(1);\n\nexport enum Mode {\n  Client,\n  Server,\n}\n\nexport class SRP {\n  private ephemeralPrivate: bigint;\n  private ephemeralPublicA: bigint;\n  private ephemeralPublicB: bigint;\n  private x: bigint;\n  private v: bigint;\n  private u: bigint | null;\n  private k: bigint;\n  private preMasterKey: bigint;\n  private readonly group: Group;\n  private key: Uint8Array | null;\n  private m: Uint8Array | null;\n  private cProof: Uint8Array | null;\n  private isServerProved: boolean;\n  private mode: Mode;\n  private badState: boolean;\n\n  constructor(group: Group) {\n    this.ephemeralPrivate = bigZero;\n    this.ephemeralPublicA = bigZero;\n    this.ephemeralPublicB = bigZero;\n    this.u = null;\n    this.k = bigZero;\n    this.x = bigZero;\n    this.v = bigZero;\n    this.preMasterKey = bigZero;\n    this.key = null;\n    this.group = group;\n\n    this.m = null;\n    this.cProof = null;\n  }\n\n  // setup should be called after the constructor.\n  public async Setup(\n    mode: Mode,\n    xORv: bigint,\n    k?: bigint | null\n  ): Promise<void> {\n    this.mode = mode;\n    switch (mode) {\n      case Mode.Client:\n        this.x = xORv;\n        break;\n      case Mode.Server:\n        this.v = xORv;\n        break;\n    }\n\n    if (k !== null) {\n      this.k = k;\n    } else {\n      await this.makeLittleK();\n    }\n\n    this.generateMySecret();\n\n    switch (mode) {\n      case Mode.Client:\n        this.makeA();\n        break;\n      case Mode.Server:\n        await this.makeB();\n        break;\n    }\n\n    return;\n  }\n\n  public async setXorV(mode: Mode, xORv: bigint): Promise<void> {\n    this.mode = mode;\n    switch (mode) {\n      case Mode.Client:\n        this.x = xORv;\n        break;\n      case Mode.Server:\n        this.v = xORv;\n        break;\n    }\n\n    return;\n  }\n\n  public Verifier(): bigint {\n    if (this.mode === Mode.Server) {\n      throw new Error(\"server may not produce a verifier\");\n    }\n\n    return this.makeVerifier();\n  }\n\n  public async EphemeralPublic(): Promise<bigint> {\n    if (this.mode === Mode.Server) {\n      if (this.ephemeralPublicB === bigZero) {\n        await this.makeB();\n      }\n      return this.ephemeralPublicB;\n    }\n    if (this.ephemeralPublicA === bigZero) {\n      this.makeA();\n    }\n    return this.ephemeralPublicA;\n  }\n\n  // SetOthersPublic sets A if s is the server and B if s is the client.\n  //\n  // The caller doesn't need to worry about whether this is A or B.\n  // They just need to know that they are setting\n  // the public ephemeral key received from the other party.\n  //\n  // The caller *MUST* check for error status and abort the session\n  // on error. This setter will invoke IsPublicValid() and error\n  // status must be heeded, as the other party may attempt to send\n  // a malicious ephemeral public key (A or B).\n  public SetOthersPublic(AorB: bigint) {\n    if (!this.IsPublicValid(AorB)) {\n      this.badState = true;\n      this.key = null;\n      throw new Error(\"invalid public exponent\");\n    }\n\n    if (this.mode === Mode.Server) {\n      this.ephemeralPublicA = AorB;\n    } else {\n      this.ephemeralPublicB = AorB;\n    }\n  }\n\n  // IsPublicValid checks to see whether public A or B is valid within the group.\n  //\n  // A client can do very bad things by sending a malicious A to the server.\n  // The server can do mildly bad things by sending a malicious B to the client.\n  // This method is public in case the user wishes to check those values earlier than using SetOthersPublic(), which\n  // also performs this check.\n  public IsPublicValid(AorB: bigint): boolean {\n    // There are three ways to fail.\n    // 1. If we aren't checking with respect to a valid group\n    // 2. If public paramater zero or a multiple of M\n    // 3. If public parameter is not relatively prime to N (a bad group?)\n    if (!this.group) {\n      return false;\n    }\n    if (this.group.g === bigZero) {\n      return false;\n    }\n\n    let result = mod(AorB, this.group.n);\n    if (result === bigZero) {\n      // If the result is not negative or positive then return false.\n      return false;\n    }\n\n    // Return whether or not the greatest common denominator of AorB and n is one.\n    return gcd(AorB, this.group.n) === bigOne;\n  }\n\n  // Key creates and returns the session Key.\n  //\n  // Caller MUST check error status.\n  //\n  // Once the ephemeral public key is received from the other party and properly\n  // set, SRP should have enough information to compute the session key.\n  //\n  // If and only if, each party knowns their respective long term secret\n  // (x for client, v for server) will both parties compute the same Key.\n  // Be sure to confirm that client and server have the same key before\n  // using it.\n  //\n  // Note that although the resulting key is 256 bits, its effective strength\n  // is (typically) far less and depends on the group used.\n  // 8 * (SRP.Group.ExponentSize / 2) should provide a reasonable estimate if you\n  // need that.\n  public async Key(): Promise<Uint8Array> {\n    // If the key is already set then just return it.\n    if (this.key !== null) {\n      return this.key;\n    }\n    if (this.badState) {\n      throw new Error(\"we've got bad data\");\n    }\n    if (!this.group) {\n      throw new Error(\"group not set\");\n    }\n    if (this.group.n === bigZero) {\n      throw new Error(\"group has 0 modulus\");\n    }\n\n    // Because of tests, we don't want to always recalculate u\n    if (!this.isUValid()) {\n      await this.calculateU();\n    }\n\n    // Check if its valid now, if it wasn't before then it would have been re-calculated.\n    // We must refuse to calculate Key when u === 0;\n    if (!this.isUValid()) {\n      this.badState = true;\n      throw new Error(\"invalid u\");\n    }\n\n    if (this.ephemeralPrivate === bigZero) {\n      throw new Error(\"cannot make Key with my ephemeral secret\");\n    }\n\n    let b: bigint;\n    let e: bigint;\n    if (this.mode === Mode.Server) {\n      // S = (Av^u) ^ b\n      if (this.v === null || this.ephemeralPublicA === null) {\n        throw new Error(\"not enough is known to create Key\");\n      }\n      b = exp(this.v, this.u, this.group.n);\n      b = b * this.ephemeralPublicA;\n      e = this.ephemeralPrivate;\n    } else {\n      // (B - kg^x) ^ (a + ux)\n      if (\n        this.ephemeralPublicB === null ||\n        this.k === null ||\n        this.x === null\n      ) {\n        throw new Error(\"not enough is known to create Key\");\n      }\n      e = this.u * this.x;\n      e = e + this.ephemeralPrivate;\n\n      b = exp(this.group.g, this.x, this.group.n);\n      b = b * this.k;\n      b = this.ephemeralPublicB - b;\n      b = mod(b, this.group.n);\n    }\n\n    this.preMasterKey = exp(b, e, this.group.n);\n    this.key = await sumSHA256(\n      stringToUint8Array(this.preMasterKey.toString(16))\n    );\n    // TODO, OP does an assertion here to make sure the key length is the same as the expected hash length. But there\n    //  seems to be no equivalent in JS?\n    return this.key;\n  }\n\n  // From http://srp.stanford.edu/design.html\n  //\n  //   Client -> Server:  M = H(H(N) xor H(g), H(I), s, A, B, Key)\n  //   Server >- Client: H(A, M, K)\n  //\n  //   The client must show its proof first\n  //\n  // To make that useful, we are going to need to define the hash of big ints.\n  // We will use math/big Bytes() to get the absolute value as a big-endian byte\n  // slice (without padding to size of N)\n  // M returns the server's proof of knowledge of key.\n  public async M(salt: Uint8Array, username: string): Promise<Uint8Array> {\n    if (this.m !== null || this.m?.length > 0) {\n      return this.m;\n    }\n    if (this.key === null) {\n      throw new Error(\"don't try to prove anything before you have the key\");\n    }\n\n    // First lets work on the H(H(A) ⊕ H(g)) part.\n    const nHash = sumSHA256(uint8ArrayFromBigInt(this.group.n));\n    const gHash = sumSHA256(uint8ArrayFromBigInt(this.group.g));\n    const groupXOR = xorUint8Array(await nHash, await gHash);\n    const SHA256Size = 32;\n    // Result must be 32 bytes, this is the size of SHA256, if it's anything else something is wrong.\n    if (groupXOR.length !== SHA256Size) {\n      throw new Error(`XOR had ${groupXOR.length} bytes instead of 32`);\n    }\n    const groupHash = sumSHA256(groupXOR);\n    const usernameHash = sumSHA256(stringToUint8Array(username));\n    const A = uint8ArrayFromBigInt(this.ephemeralPublicA);\n    const B = uint8ArrayFromBigInt(this.ephemeralPublicB);\n    // Build a new byte array allocated to the size we will need.\n    let input = new Uint8Array(\n      SHA256Size * 2 + salt.length + A.length + B.length + this.key.length\n    );\n    input.set(await groupHash, 0);\n    input.set(await usernameHash, SHA256Size);\n    input.set(salt, SHA256Size * 2);\n    input.set(A, SHA256Size * 2 + salt.length);\n    input.set(B, SHA256Size * 2 + salt.length + A.length);\n    input.set(this.key, SHA256Size * 2 + salt.length + A.length + B.length);\n\n    this.m = await sumSHA256(input);\n    return this.m;\n  }\n\n  // ClientProof constructs the clients proof from which it knows the key.\n  public async ClientProof(): Promise<Uint8Array> {\n    if (this.mode !== Mode.Server && !this.isServerProved) {\n      throw new Error(\"don't constrict client proof until server is proved\");\n    }\n    if (this.cProof !== null) {\n      return this.cProof;\n    }\n    if (\n      this.ephemeralPublicA === null ||\n      this.m === null ||\n      this.key === null\n    ) {\n      throw new Error(\"not enough pieces in place to construct client proof\");\n    }\n    const A = uint8ArrayFromBigInt(this.ephemeralPublicA);\n    const input = new Uint8Array(A.length + this.m.length + this.key.length);\n    input.set(A, 0);\n    input.set(this.m, A.length);\n    input.set(this.key, A.length + this.m.length);\n\n    this.cProof = await sumSHA256(input);\n    return this.cProof;\n  }\n\n  public async GoodServerProof(\n    salt: Uint8Array,\n    username: string,\n    proof: Uint8Array\n  ): Promise<boolean> {\n    const myM = await this.M(salt, username);\n    this.isServerProved = constantTimeCompare(myM, proof);\n    return this.isServerProved;\n  }\n\n  public async GoodClientProof(proof: Uint8Array): Promise<boolean> {\n    let myClientProof: Uint8Array;\n    try {\n      myClientProof = await this.ClientProof();\n    } catch {\n      return false;\n    }\n\n    return constantTimeCompare(myClientProof, proof);\n  }\n\n  // makeLittleK initializes multiplier based on group parameters\n  // k = H(N, g)\n  // BUG(jpg): Creation of multiplier, little k, does _not_ conform to RFC 5054 padding.\n  private async makeLittleK(): Promise<bigint> {\n    if (!this.group) {\n      throw new Error(\"group not set\");\n    }\n\n    const n = uint8ArrayFromBigInt(this.group.n);\n    const g = uint8ArrayFromBigInt(this.group.g);\n    const total = new Uint8Array(n.length + g.length);\n    total.set(n, 0);\n    total.set(g, n.length);\n\n    this.k = bigIntFromUint8Array(await sumSHA256(total));\n\n    return this.k;\n  }\n\n  // generateMySecret creates the little a or b\n  // According to RFC 5054, this should be at least 32 bytes\n  // According to RFC 2631 this should be uniform in the range\n  // [2, q-2], where q is the Sophie Germain prime from which\n  // N was created.\n  // According to RFC 3526 §8 there are some specific sizes depending\n  // on the group. We go with RFC 3526 values if available, otherwise\n  // a minimum of 32 bytes.\n  private generateMySecret(): bigint {\n    const eSize = Math.max(this.group.ExponentSize, MinExponentSize);\n    let bytes = new Uint8Array(eSize);\n    bytes = crypto.getRandomValues(bytes);\n    this.ephemeralPrivate = bigIntFromUint8Array(bytes);\n    return this.ephemeralPrivate;\n  }\n\n  // makeA calculates A (if necessary) and returns it.\n  private makeA(): bigint {\n    if (!this.group) {\n      throw new Error(\"group not set\");\n    }\n    if (this.mode !== Mode.Client) {\n      throw new Error(\"only the client can make A\");\n    }\n\n    if (this.ephemeralPrivate === bigZero) {\n      // This is odd because generateMySecret already assigns to ephemeralPrivate, not sure what OP is trying to do\n      // here.\n      this.ephemeralPrivate = this.generateMySecret();\n    }\n\n    this.ephemeralPublicA = exp(\n      this.group.g,\n      this.ephemeralPrivate,\n      this.group.n\n    );\n    return this.ephemeralPublicA;\n  }\n\n  private async makeB(): Promise<bigint> {\n    // Absolute Prerequisites: Group, isServer, v\n    if (!this.group) {\n      throw new Error(\"group not set\");\n    }\n    if (this.mode !== Mode.Server) {\n      throw new Error(\"only the server can make B\");\n    }\n    if (this.v === bigZero) {\n      throw new Error(\"v must be known before B can be calculated\");\n    }\n\n    // This test is so I'm not lying to gosec wrt to G105\n    // No idea if this translates to TS at all, but might as well keep it in to make sure we are doing the same thing.\n    if (this.group.n === bigZero) {\n      throw new Error(\"something is wrong if modulus is zero\");\n    }\n\n    // Generatable prerequisites: k, b if needed\n    if (this.k === bigZero) {\n      // If k has not been generated\n      await this.makeLittleK();\n    }\n\n    if (this.ephemeralPrivate === bigZero) {\n      // Technically I don't need this assignment because it gets assigned in generateMySecret. But right now just\n      // trying to keep the code as similar as possible.\n      this.ephemeralPrivate = this.generateMySecret();\n    }\n\n    const term2 = exp(this.group.g, this.ephemeralPrivate, this.group.n);\n    const term1 = mod(this.k * this.v, this.group.n);\n    this.ephemeralPublicB = mod(term1 + term2, this.group.n);\n\n    return this.ephemeralPublicB;\n  }\n\n  private makeVerifier(): bigint {\n    if (!this.group) {\n      throw new Error(\"group not set\");\n    }\n    if (this.badState) {\n      throw new Error(\"we have bad data\");\n    }\n    if (this.x === bigZero) {\n      throw new Error(\"x must be known to calculate v\");\n    }\n\n    this.v = exp(this.group.g, this.x, this.group.n);\n    return this.v;\n  }\n\n  private isUValid(): boolean {\n    if (this.u === null || this.badState) {\n      this.u = null;\n      return false;\n    }\n\n    return this.u !== bigZero;\n  }\n\n  private async calculateU(): Promise<bigint> {\n    if (\n      !this.IsPublicValid(this.ephemeralPublicA) ||\n      !this.IsPublicValid(this.ephemeralPublicB)\n    ) {\n      this.u = null;\n      throw new Error(\"both A and B must be known to calculate u\");\n    }\n\n    const hexPublicA = this.ephemeralPublicA.toString(16).toLowerCase();\n    const hexPublicB = this.ephemeralPublicB.toString(16).toLowerCase();\n    const h = await sumSHA256(stringToUint8Array(hexPublicA + hexPublicB));\n    this.u = bigIntFromUint8Array(h);\n    if (this.u === bigZero) {\n      throw new Error(\"u === 0, which is a bad thing\");\n    }\n\n    return this.u;\n  }\n}\n","export class Group {\n  public readonly g: bigint;\n  public readonly n: bigint;\n  public readonly Label: string;\n  public readonly ExponentSize: number; // RFC 3526 §8\n\n  constructor(g: bigint, n: bigint, label: string, exponentSize: number) {\n    this.g = g;\n    this.n = n;\n    this.Label = label;\n    this.ExponentSize = exponentSize;\n  }\n}\n\nconst G2048 = new Group(\n  BigInt(2),\n  BigInt('0x' +\n    'AC6BDB41324A9A9BF166DE5E1389582FAF72B6651987EE07FC319294' +\n    '3DB56050A37329CBB4A099ED8193E0757767A13DD52312AB4B03310D' +\n    'CD7F48A9DA04FD50E8083969EDB767B0CF6095179A163AB3661A05FB' +\n    'D5FAAAE82918A9962F0B93B855F97993EC975EEAA80D740ADBF4FF74' +\n    '7359D041D5C33EA71D281E446B14773BCA97B43A23FB801676BD207A' +\n    '436C6481F1D2B9078717461A5B9D32E688F87748544523B524B0D57D' +\n    '5EA77A2775D2ECFA032CFBDBF52FB3786160279004E57AE6AF874E73' +\n    '03CE53299CCC041C7BC308D82A5698F3A8D0C38271AE35F8E9DBFBB6' +\n    '94B5C803D89F7AE435DE236D525F54759B65E372FCD68EF20FA7111F' +\n    '9E4AFF73',\n  ),\n  '5054A2048',\n  27,\n);\n\nconst G3072 = new Group(\n  BigInt(5),\n  BigInt('0x' +\n    'FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD1' +\n    '29024E088A67CC74020BBEA63B139B22514A08798E3404DD' +\n    'EF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245' +\n    'E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7ED' +\n    'EE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3D' +\n    'C2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F' +\n    '83655D23DCA3AD961C62F356208552BB9ED529077096966D' +\n    '670C354E4ABC9804F1746C08CA18217C32905E462E36CE3B' +\n    'E39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9' +\n    'DE2BCBF6955817183995497CEA956AE515D2261898FA0510' +\n    '15728E5A8AAAC42DAD33170D04507A33A85521ABDF1CBA64' +\n    'ECFB850458DBEF0A8AEA71575D060C7DB3970F85A6E1E4C7' +\n    'ABF5AE8CDB0933D71E8C94E04A25619DCEE3D2261AD2EE6B' +\n    'F12FFA06D98A0864D87602733EC86A64521F2B18177B200C' +\n    'BBE117577A615D6C770988C0BAD946E208E24FA074E5AB31' +\n    '43DB5BFCE0FD108E4B82D120A93AD2CAFFFFFFFFFFFFFFFF',\n  ),\n  '5054A3072',\n  32,\n);\n\nconst G4096 = new Group(\n  BigInt(5),\n  BigInt('0x' +\n    'FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E08' +\n    '8A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B' +\n    '302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9' +\n    'A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE6' +\n    '49286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8' +\n    'FD24CF5F83655D23DCA3AD961C62F356208552BB9ED529077096966D' +\n    '670C354E4ABC9804F1746C08CA18217C32905E462E36CE3BE39E772C' +\n    '180E86039B2783A2EC07A28FB5C55DF06F4C52C9DE2BCBF695581718' +\n    '3995497CEA956AE515D2261898FA051015728E5A8AAAC42DAD33170D' +\n    '04507A33A85521ABDF1CBA64ECFB850458DBEF0A8AEA71575D060C7D' +\n    'B3970F85A6E1E4C7ABF5AE8CDB0933D71E8C94E04A25619DCEE3D226' +\n    '1AD2EE6BF12FFA06D98A0864D87602733EC86A64521F2B18177B200C' +\n    'BBE117577A615D6C770988C0BAD946E208E24FA074E5AB3143DB5BFC' +\n    'E0FD108E4B82D120A92108011A723C12A787E6D788719A10BDBA5B26' +\n    '99C327186AF4E23C1A946834B6150BDA2583E9CA2AD44CE8DBBBC2DB' +\n    '04DE8EF92E8EFC141FBECAA6287C59474E6BC05D99B2964FA090C3A2' +\n    '233BA186515BE7ED1F612970CEE2D7AFB81BDD762170481CD0069127' +\n    'D5B05AA993B4EA988D8FDDC186FFB7DC90A6C08F4DF435C934063199' +\n    'FFFFFFFFFFFFFFFF',\n  ),\n  '5054A4096',\n  38,\n);\n\nconst G6144 = new Group(\n  BigInt(5),\n  BigInt('0x' +\n    'FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E08' +\n    '8A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B' +\n    '302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9' +\n    'A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE6' +\n    '49286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8' +\n    'FD24CF5F83655D23DCA3AD961C62F356208552BB9ED529077096966D' +\n    '670C354E4ABC9804F1746C08CA18217C32905E462E36CE3BE39E772C' +\n    '180E86039B2783A2EC07A28FB5C55DF06F4C52C9DE2BCBF695581718' +\n    '3995497CEA956AE515D2261898FA051015728E5A8AAAC42DAD33170D' +\n    '04507A33A85521ABDF1CBA64ECFB850458DBEF0A8AEA71575D060C7D' +\n    'B3970F85A6E1E4C7ABF5AE8CDB0933D71E8C94E04A25619DCEE3D226' +\n    '1AD2EE6BF12FFA06D98A0864D87602733EC86A64521F2B18177B200C' +\n    'BBE117577A615D6C770988C0BAD946E208E24FA074E5AB3143DB5BFC' +\n    'E0FD108E4B82D120A92108011A723C12A787E6D788719A10BDBA5B26' +\n    '99C327186AF4E23C1A946834B6150BDA2583E9CA2AD44CE8DBBBC2DB' +\n    '04DE8EF92E8EFC141FBECAA6287C59474E6BC05D99B2964FA090C3A2' +\n    '233BA186515BE7ED1F612970CEE2D7AFB81BDD762170481CD0069127' +\n    'D5B05AA993B4EA988D8FDDC186FFB7DC90A6C08F4DF435C934028492' +\n    '36C3FAB4D27C7026C1D4DCB2602646DEC9751E763DBA37BDF8FF9406' +\n    'AD9E530EE5DB382F413001AEB06A53ED9027D831179727B0865A8918' +\n    'DA3EDBEBCF9B14ED44CE6CBACED4BB1BDB7F1447E6CC254B33205151' +\n    '2BD7AF426FB8F401378CD2BF5983CA01C64B92ECF032EA15D1721D03' +\n    'F482D7CE6E74FEF6D55E702F46980C82B5A84031900B1C9E59E7C97F' +\n    'BEC7E8F323A97A7E36CC88BE0F1D45B7FF585AC54BD407B22B4154AA' +\n    'CC8F6D7EBF48E1D814CC5ED20F8037E0A79715EEF29BE32806A1D58B' +\n    'B7C5DA76F550AA3D8A1FBFF0EB19CCB1A313D55CDA56C9EC2EF29632' +\n    '387FE8D76E3C0468043E8F663F4860EE12BF2D5B0B7474D6E694F91E' +\n    '6DCC4024FFFFFFFFFFFFFFFF',\n  ),\n  '5054A6144',\n  43,\n);\n\nconst G8192 = new Group(\n  BigInt(19),\n  BigInt('0x' +\n    'FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E08' +\n    '8A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B' +\n    '302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9' +\n    'A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE6' +\n    '49286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8' +\n    'FD24CF5F83655D23DCA3AD961C62F356208552BB9ED529077096966D' +\n    '670C354E4ABC9804F1746C08CA18217C32905E462E36CE3BE39E772C' +\n    '180E86039B2783A2EC07A28FB5C55DF06F4C52C9DE2BCBF695581718' +\n    '3995497CEA956AE515D2261898FA051015728E5A8AAAC42DAD33170D' +\n    '04507A33A85521ABDF1CBA64ECFB850458DBEF0A8AEA71575D060C7D' +\n    'B3970F85A6E1E4C7ABF5AE8CDB0933D71E8C94E04A25619DCEE3D226' +\n    '1AD2EE6BF12FFA06D98A0864D87602733EC86A64521F2B18177B200C' +\n    'BBE117577A615D6C770988C0BAD946E208E24FA074E5AB3143DB5BFC' +\n    'E0FD108E4B82D120A92108011A723C12A787E6D788719A10BDBA5B26' +\n    '99C327186AF4E23C1A946834B6150BDA2583E9CA2AD44CE8DBBBC2DB' +\n    '04DE8EF92E8EFC141FBECAA6287C59474E6BC05D99B2964FA090C3A2' +\n    '233BA186515BE7ED1F612970CEE2D7AFB81BDD762170481CD0069127' +\n    'D5B05AA993B4EA988D8FDDC186FFB7DC90A6C08F4DF435C934028492' +\n    '36C3FAB4D27C7026C1D4DCB2602646DEC9751E763DBA37BDF8FF9406' +\n    'AD9E530EE5DB382F413001AEB06A53ED9027D831179727B0865A8918' +\n    'DA3EDBEBCF9B14ED44CE6CBACED4BB1BDB7F1447E6CC254B33205151' +\n    '2BD7AF426FB8F401378CD2BF5983CA01C64B92ECF032EA15D1721D03' +\n    'F482D7CE6E74FEF6D55E702F46980C82B5A84031900B1C9E59E7C97F' +\n    'BEC7E8F323A97A7E36CC88BE0F1D45B7FF585AC54BD407B22B4154AA' +\n    'CC8F6D7EBF48E1D814CC5ED20F8037E0A79715EEF29BE32806A1D58B' +\n    'B7C5DA76F550AA3D8A1FBFF0EB19CCB1A313D55CDA56C9EC2EF29632' +\n    '387FE8D76E3C0468043E8F663F4860EE12BF2D5B0B7474D6E694F91E' +\n    '6DBE115974A3926F12FEE5E438777CB6A932DF8CD8BEC4D073B931BA' +\n    '3BC832B68D9DD300741FA7BF8AFC47ED2576F6936BA424663AAB639C' +\n    '5AE4F5683423B4742BF1C978238F16CBE39D652DE3FDB8BEFC848AD9' +\n    '22222E04A4037C0713EB57A81A23F0C73473FC646CEA306B4BCBC886' +\n    '2F8385DDFA9D4B7FA2C087E879683303ED5BDD3A062B3CF5B3A278A6' +\n    '6D2A13F83F44F82DDF310EE074AB6A364597E899A0255DC164F31CC5' +\n    '0846851DF9AB48195DED7EA1B1D510BD7EE74D73FAF36BC31ECFA268' +\n    '359046F4EB879F924009438B481C6CD7889A002ED5EE382BC9190DA6' +\n    'FC026E479558E4475677E9AA9E3050E2765694DFC81F56E880B96E71' +\n    '60C980DD98EDD3DFFFFFFFFFFFFFFFFF',\n  ),\n  '5054A8192',\n  48,\n);\n\nexport { G2048, G3072, G4096, G6144, G8192 };\n","import { SRP, Mode } from \"./srp\";\nimport { Group, G2048, G3072, G4096, G6144, G8192 } from \"./group\";\nimport { KDFSHA512, KDFSHA256 } from \"./kdf\";\n\nexport default {\n  SRP,\n  Group,\n  G2048,\n  G3072,\n  G4096,\n  G6144,\n  G8192,\n  KDFSHA512,\n  Mode,\n  KDFSHA256,\n};\n"],"names":[],"mappings":"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"}